import { createClient } from './supabase/client';
import { BlogPost } from '@/lib/types';

// Define the Blog type from the database
interface BlogDB {
  id: string;
  title: string;
  slug: string;
  content: string;
  excerpt: string;
  cover_image: string;
  created_at: string;
  published_at: string | null;
  author: string | null;
  category: string | null;
}

/**
 * Returns fallback blog data when database fetch fails
 */
function getFallbackBlogs(): BlogPost[] {
  return [
    {
      id: "fallback-1",
      title: "10 Hidden Beaches in Goa You Can Only Reach With a Car",
      slug: "hidden-beaches-in-goa",
      description: "Discover secluded beaches in Goa that are away from the tourist crowds.",
      content: "# 10 Hidden Beaches in Goa\n\nGoa is famous for its beautiful beaches...",
      cover_image: "https://images.pexels.com/photos/1174732/pexels-photo-1174732.jpeg",
      date: "2023-04-15",
      author: "Priya Nayak",
      category: "Travel"
    },
    {
      id: "fallback-2",
      title: "The Complete Guide to Driving in Goa",
      slug: "guide-to-driving-in-goa",
      description: "Everything you need to know about road rules and navigation in Goa.",
      content: "# The Complete Guide to Driving in Goa\n\nExploring Goa with your own vehicle...",
      cover_image: "https://images.pexels.com/photos/7876379/pexels-photo-7876379.jpeg",
      date: "2023-07-05",
      author: "Anjali Menon",
      category: "Travel Tips"
    },
    {
      id: "fallback-3",
      title: "5 Scenic Drives in Goa You Shouldn't Miss",
      slug: "scenic-drives-in-goa",
      description: "Explore the most beautiful routes for a road trip in Goa.",
      content: "# 5 Scenic Drives in Goa\n\nWith its winding coastal roads and lush landscapes...",
      cover_image: "https://images.pexels.com/photos/1252500/pexels-photo-1252500.jpeg",
      date: "2023-08-12",
      author: "Rahul Sharma",
      category: "Travel"
    }
  ];
}

/**
 * Fetch all blogs from the database
 */
export async function getBlogs(): Promise<BlogPost[]> {
  try {
    // Force a new connection to ensure fresh data
    const supabase = createClient();
    
    const { data, error } = await supabase
      .from('blogs')
      .select('*')
      .order('created_at', { ascending: false });
      
    if (error) {
      console.error('Error fetching blogs:', error);
      // Return fallback data instead of empty array
      return getFallbackBlogs();
    }
    
    if (!data || data.length === 0) {
      console.log('No blogs found in database, using fallback data');
      return getFallbackBlogs();
    }
    
    console.log('Successfully fetched', data.length, 'blogs from database');
    
    // Map the database fields to the BlogPost type with proper type safety
    return data.map((blog) => ({
      id: blog.id as string,
      title: blog.title as string,
      slug: blog.slug as string,
      description: blog.excerpt as string,
      content: blog.content as string,
      cover_image: (blog.cover_image as string) || 'https://images.pexels.com/photos/1252500/pexels-photo-1252500.jpeg',
      date: blog.created_at ? new Date(blog.created_at as string).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
      author: (blog.author as string) || 'Admin',
      category: (blog.category as string) || 'Travel',
    }));
  } catch (error) {
    console.error('Error fetching blogs:', error);
    return getFallbackBlogs();
  }
}

/**
 * Fetch a blog by its slug
 */
export async function getBlogBySlug(slug: string): Promise<BlogPost | null> {
  try {
    // Force a new connection to ensure fresh data
    const supabase = createClient();
    
    const { data, error } = await supabase
      .from('blogs')
      .select('*')
      .eq('slug', slug)
      .single();
      
    if (error) {
      console.error('Error fetching blog by slug:', error);
      return null;
    }
    
    if (!data) {
      return null;
    }
    
    // Map the database fields to the BlogPost type with proper type safety
    return {
      id: data.id as string,
      title: data.title as string,
      slug: data.slug as string,
      description: data.excerpt as string,
      content: data.content as string,
      cover_image: data.cover_image as string,
      date: new Date(data.created_at as string).toISOString().split('T')[0],
      author: (data.author as string) || 'Admin',
      category: (data.category as string) || 'Travel',
    };
  } catch (error) {
    console.error('Error fetching blog by slug:', error);
    return null;
  }
}

/**
 * Fetch related blogs based on category
 */
export async function getRelatedBlogs(currentSlug: string, count = 2): Promise<BlogPost[]> {
  try {
    // Force a new connection to ensure fresh data
    const supabase = createClient();
    
    // First get the current blog to find its category
    const currentBlog = await getBlogBySlug(currentSlug);
    
    if (!currentBlog) {
      return [];
    }
    
    // Then get blogs with the same category
    const { data, error } = await supabase
      .from('blogs')
      .select('*')
      .eq('category', currentBlog.category)
      .neq('slug', currentSlug)
      .order('created_at', { ascending: false })
      .limit(count);
      
    if (error) {
      console.error('Error fetching related blogs:', error);
      return [];
    }
    
    if (!data || data.length === 0) {
      return [];
    }
    
    // Map the database fields to the BlogPost type with proper type safety
    return data.map((blog) => ({
      id: blog.id as string,
      title: blog.title as string,
      slug: blog.slug as string,
      description: blog.excerpt as string,
      content: blog.content as string,
      cover_image: blog.cover_image as string,
      date: new Date(blog.created_at as string).toISOString().split('T')[0],
      author: (blog.author as string) || 'Admin',
      category: (blog.category as string) || 'Travel',
    }));
  } catch (error) {
    console.error('Error fetching related blogs:', error);
    return [];
  }
}
